# -*- coding: utf-8 -*-
"""DerinOgrenmeProje.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VzOUatZ2l1iqzRoO-ntzmGzWewDFbQqO
"""

!pip install easyocr

import easyocr as ocr
import cv2
import numpy as np

ocr_motoru = ocr.Reader(['en', 'tr'])

with open('deneme7.webp', 'rb') as f:
  resim = f.read()

resim_ham = np.fromstring(resim, np.uint8)
resim_cv2 = cv2.imdecode(resim_ham, cv2.IMREAD_COLOR)

from google.colab.patches import cv2_imshow


cv2_imshow(resim_cv2)

yazilar = ocr_motoru.readtext(resim)

for yazi in yazilar:
  print(yazi)

for yazi in yazilar:
  print(yazi)
  cv2.rectangle(resim_cv2, [int(yazi[0][0][0]), int(yazi[0][0][1])], [int(yazi[0][2][0]), int(yazi[0][2][1])], (0, 0, 255), 2)





from google.colab.patches import cv2_imshow


cv2_imshow(resim_cv2)

ocr_motoru = ocr.Reader(['en', 'tr'])
yazilar = ocr_motoru.readtext('https://pbs.twimg.com/media/DcrrhrgXcAE8wiQ.jpg')
print(yazilar)

import numpy as np
import struct

def read_mnist_images(filename):
    with open(filename, 'rb') as file:
        magic, num, rows, cols = struct.unpack(">IIII", file.read(16))
        images = np.fromfile(file, dtype=np.uint8).reshape(num, rows, cols)
    return images

def read_mnist_labels(file_path):
    with open(file_path, 'rb') as file:
        magic_number, num_labels = struct.unpack(">II", file.read(8))
        labels = np.fromfile(file, dtype=np.uint8)
    return labels

train_images = read_mnist_images('train-images.idx3-ubyte')
train_labels = read_mnist_labels('train-labels.idx1-ubyte')
#test_images = read_mnist_images('t10k-images.idx3-ubyte')
#test_labels = read_mnist_labels('t10k-labels.idx1-ubyte')

import matplotlib.pyplot as plt

def display_images(images, labels, rows=3, cols=5):
    # Set up a grid of plots
    fig, axes = plt.subplots(nrows=rows, ncols=cols, figsize=(cols*2, rows*2))
    for i, ax in enumerate(axes.flat):
        if i < len(images):
            # Display an image
            ax.imshow(images[i], cmap='gray')
            # Show the corresponding label as the title
            ax.set_title(f"Label: {labels[i]}")
            # Remove ticks from the plot
            ax.set_xticks([])
            ax.set_yticks([])
        else:
            # Hide axes if there are no images to display
            ax.axis('off')

    plt.tight_layout()
    plt.show()

# Assuming you have already read your images and labels using the functions described earlier
display_images(train_images, train_labels, 3, 5)